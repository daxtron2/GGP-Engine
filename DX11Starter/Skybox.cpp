#include "Skybox.h"

/// <summary>
/// Constructs a skybox from a pointer to a cube Mesh, cube map, and device
/// </summary>
/// <param name="cubeMesh">meshes[0] (a cube object)</param>
/// <param name="cubeMapTexture">SRV generated by Game::CreateCubemap(...)</param>
/// <param name="samplerState"></param>
/// <param name="device"></param>
Skybox::Skybox(
	std::shared_ptr<Mesh> cubeMesh,
	Microsoft::WRL::ComPtr<ID3D11ShaderResourceView> cubeMapTexture,
	Microsoft::WRL::ComPtr<ID3D11SamplerState> samplerState,
	Microsoft::WRL::ComPtr<ID3D11Device> device,
	std::shared_ptr<SimpleVertexShader> vertexShader,
	std::shared_ptr<SimplePixelShader> pixelShader)
{
	this->cubeMesh = cubeMesh;
	this->cubeMapTexture = cubeMapTexture;
	this->samplerState = samplerState;
	this->device = device;
	this->vertexShader = vertexShader;
	this->pixelShader = pixelShader;

	// Generate a rasterizer that does a solid fill of the inside of the cubemap
	D3D11_RASTERIZER_DESC rastDesc = {};
	rastDesc.FillMode = D3D11_FILL_SOLID;
	rastDesc.CullMode = D3D11_CULL_FRONT;
	device->CreateRasterizerState(&rastDesc, &rasterizerState);

	// Make the depth buffer compare to <=1.0f instead of <1.0f
	// to overwrite the default 1.0f buffer depth with the skybox color
	D3D11_DEPTH_STENCIL_DESC depthDesc = {};
	depthDesc.DepthEnable = true;
	depthDesc.DepthFunc = D3D11_COMPARISON_LESS_EQUAL;
	device->CreateDepthStencilState(&depthDesc, &depthStencilState);
}

/// <summary>
/// Draw the skybox as a background behind all other objects
/// </summary>
/// <param name="context">device context</param>
/// <param name="viewMatrix">camera->GetViewMatrix()</param>
/// <param name="projectionMatrix">camera->GetProjectionMatrix()</param>
void Skybox::Draw(Microsoft::WRL::ComPtr<ID3D11DeviceContext> context, Camera* camera)
{
	// Change render states
	context->RSSetState(rasterizerState.Get());
	context->OMSetDepthStencilState(depthStencilState.Get(), 0);

	// Prepare sky-specific shaders for drawing
	vertexShader->SetShader();
	pixelShader->SetShader();

	// Copy necessary data for VSSkybox cbuffer
	vertexShader->SetMatrix4x4("view", camera->GetViewMatrix());
	vertexShader->SetMatrix4x4("projection", camera->GetProjectionMatrix());
	vertexShader->CopyAllBufferData();

	// Set the current sampler state and SRV
	pixelShader->SetShaderResourceView("textureCube", cubeMapTexture.Get());
	pixelShader->SetSamplerState("samplerOptions", samplerState.Get());

	// Draw the mesh
	UINT stride = sizeof(Vertex);
	UINT offset = 0;
	context->IASetVertexBuffers(0, 1, cubeMesh->GetVertexBuffer().GetAddressOf(), &stride, &offset);
	context->IASetIndexBuffer(cubeMesh->GetIndexBuffer().Get(), DXGI_FORMAT_R32_UINT, 0);
	context->DrawIndexed(
		cubeMesh->GetIndexCount(),     // The number of indices to use (we could draw a subset if we wanted)
		0,     // Offset to the first index we want to use
		0);    // Offset to add to each index when looking up vertices

	// Reset custom render states
	context->RSSetState(nullptr);
	context->OMSetDepthStencilState(nullptr, 0);
}
